require "yaml"

definitions = YAML.load_file(ARGV[0])

output = <<-SWIFT
// file is autogenerated from canonical_tests.yaml
//
// $ ruby Tests/CookInSwiftTests/generate_canonical_tests.rb ../spec/tests/canonical.yaml
//
// don't edit this file
//
// version: #{definitions["version"]}
//

import Foundation
import XCTest
@testable import CookInSwift

class ParserCanonicalTests: XCTestCase {
SWIFT

class String
    def indent!(amount)
        gsub!(/^(?!$)/, " " * amount)
    end
end


definitions["tests"].each do |name, definition|
    metadata = "["

    definition["result"]["metadata"].each do |key, value|
        # TODO values which are numbers
        metadata << %Q|
                MetadataNode("#{key}", "#{value}"),|
    end

    metadata << "]"

    steps = ""

    definition["result"]["steps"].each do |step|
        directions = ""

        step.each do |direction|
            directions << case direction["type"]
            when "text"
                %Q|
                    DirectionNode("#{direction["value"]}"),|
            when "ingredient"
                quantity = direction["quantity"]

                if quantity.kind_of?(String)
                    # wrap into quotes
                    quantity = %Q("#{quantity}")
                end
                %Q|
                    IngredientNode(name: "#{direction["name"]}", amount: AmountNode(quantity: #{quantity}, units: "#{direction["units"]}")),|
            when "cookware"
                quantity = direction["quantity"]

                if quantity.kind_of?(String)
                    # wrap into quotes
                    quantity = %Q("#{quantity}")
                end
                # TODO add amount: AmountNode(quantity: #{quantity})
                %Q|
                    EquipmentNode(name: "#{direction["name"]}"),|
            when "timer"
                quantity = direction["quantity"]

                if quantity.kind_of?(String)
                    # wrap into quotes
                    quantity = %Q("#{quantity}")
                end
                # TODO add
                %Q|
                    TimerNode(quantity: #{quantity}, units: "#{direction["units"]}", name: "#{direction["name"]}"),|
            else
                ""
            end
        end

        steps << %Q|
                StepNode(instructions: [#{directions}
                ]),|
    end

    output << %Q|
        func #{name}() {
            let recipe =
                """
#{definition["source"].strip.indent!(16, )}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [#{steps}
            ]

            let metadata: [MetadataNode] = #{metadata}

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    |
end

output << "}"


File.write(File.join(File.dirname(__FILE__), "ParserCanonicalTests.swift"), output)
