require "yaml"

definitions = YAML.load_file(File.join(File.dirname(__FILE__), "canonical_tests.yaml"))

output = <<-SWIFT
// file is autogenerated from canonical_tests.yaml
// don't edit this file

import Foundation
import XCTest
@testable import CookInSwift

class ParserCanonicalTests: XCTestCase {
SWIFT

class String
    def indent!(amount)
        indent_string = " "
        re = /^(?!$)/
        gsub!(re, indent_string * amount)
    end
end


definitions.each do |name, definition|

    steps = ""

    definition["result"]["steps"].each do |step|
        directions = ""

        step.each do |direction|
            directions << case direction["type"]
            when "text"
                %Q|
                    DirectionNode("#{direction["value"]}"),|
            when "ingredient"
                %Q|
                    IngredientNode(name: "#{direction["name"]}", amount: AmountNode(quantity: #{direction["quantity"]}, units: "#{direction["units"]}")),|
            else
                ""
            end
        end

        steps << %Q|
                StepNode(instructions: [
                    #{directions}
                ]),|
    end

    output << %Q|
        func #{name}() {
            let recipe =
                """
#{definition["source"].indent!(16, )}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps = [
                #{steps}
            ]

            let node = RecipeNode(steps: steps)

            XCTAssertEqual(result, node)
        }
    |
end

output << "}"


File.write(File.join(File.dirname(__FILE__), "ParserCanonicalTests.swift"), output)
