// file is autogenerated from canonical_tests.yaml
//
// $ ruby Tests/CookInSwiftTests/generate_canonical_tests.rb Tests/CookInSwiftTests/canonical_tests.yaml
//
// don't edit this file
//
// version: 1
//

import Foundation
import XCTest
@testable import CookInSwift

class ParserCanonicalTests: XCTestCase {

        func testBasicDirection() {
            let recipe =
                """
                Add a bit of chilli
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Add a bit of chilli"),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testComments() {
            let recipe =
                """
                -- testing comments
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testCommentsAfterIngredients() {
            let recipe =
                """
                @thyme{2%springs} -- testing comments
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "thyme", amount: AmountNode(quantity: 2, units: "springs")),
                    DirectionNode(" "),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testCommentsWithIngredients() {
            let recipe =
                """
                -- testing comments
                @thyme{2%springs}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "thyme", amount: AmountNode(quantity: 2, units: "springs")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testDirectionsWithDegrees() {
            let recipe =
                """
                Heat oven up to 200°C
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Heat oven up to 200°C"),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testDirectionsWithNumbers() {
            let recipe =
                """
                Heat 5L of water
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Heat 5L of water"),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testDirectionWithIngrident() {
            let recipe =
                """
                Add @chilli{3%items}, @ginger{10%g} and @milk{1%l}.
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Add "),
                    IngredientNode(name: "chilli", amount: AmountNode(quantity: 3, units: "items")),
                    DirectionNode(", "),
                    IngredientNode(name: "ginger", amount: AmountNode(quantity: 10, units: "g")),
                    DirectionNode(" and "),
                    IngredientNode(name: "milk", amount: AmountNode(quantity: 1, units: "l")),
                    DirectionNode("."),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testEquipmentMultipleWords() {
            let recipe =
                """
                Fry in #frying pan{}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Fry in "),
                    EquipmentNode(name: "frying pan"),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testEquipmentMultipleWordsWithLeadingNumber() {
            let recipe =
                """
                Fry in #7-inch nonstick frying pan{ }
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Fry in "),
                    EquipmentNode(name: "7-inch nonstick frying pan"),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testEquipmentMultipleWordsWithSpaces() {
            let recipe =
                """
                Fry in #frying pan{ }
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Fry in "),
                    EquipmentNode(name: "frying pan"),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testEquipmentOneWord() {
            let recipe =
                """
                Simmer in #pan for some time
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Simmer in "),
                    EquipmentNode(name: "pan"),
                    DirectionNode(" for some time"),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testFractions() {
            let recipe =
                """
                @milk{1/2%cup}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "milk", amount: AmountNode(quantity: 0.5, units: "cup")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testFractionsInDirections() {
            let recipe =
                """
                knife cut about every 1/2 inches
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("knife cut about every 1/2 inches"),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testFractionsLike() {
            let recipe =
                """
                @milk{01/2%cup}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "milk", amount: AmountNode(quantity: "01/2", units: "cup")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testFractionsWithSpaces() {
            let recipe =
                """
                @milk{1 / 2 %cup}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "milk", amount: AmountNode(quantity: 0.5, units: "cup")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testIngredientMultipleWordsWithLeadingNumber() {
            let recipe =
                """
                Top with @1000 island dressing{ }
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Top with "),
                    IngredientNode(name: "1000 island dressing", amount: AmountNode(quantity: 1, units: "")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testIngredientWithEmoji() {
            let recipe =
                """
                Add some @🧂
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Add some "),
                    IngredientNode(name: "🧂", amount: AmountNode(quantity: 1, units: "")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testIngridentExplicitUnits() {
            let recipe =
                """
                @chilli{3%items}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "chilli", amount: AmountNode(quantity: 3, units: "items")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testIngridentExplicitUnitsWithSpaces() {
            let recipe =
                """
                @chilli{ 3 % items }
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "chilli", amount: AmountNode(quantity: 3, units: "items")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testIngridentImplicitQuantity() {
            let recipe =
                """
                @chilli{%items}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "chilli", amount: AmountNode(quantity: 1, units: "items")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testIngridentImplicitUnits() {
            let recipe =
                """
                @chilli{3}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "chilli", amount: AmountNode(quantity: 3, units: "")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testIngridentNoUnits() {
            let recipe =
                """
                @chilli
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "chilli", amount: AmountNode(quantity: 1, units: "")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testIngridentNoUnitsNotOnlyString() {
            let recipe =
                """
                @5peppers
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "5peppers", amount: AmountNode(quantity: 1, units: "")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testIngridentWithNumbers() {
            let recipe =
                """
                @tipo 00 flour{250%g}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "tipo 00 flour", amount: AmountNode(quantity: 250, units: "g")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testIngridentWithoutStopper() {
            let recipe =
                """
                @chilli cut into pieces
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "chilli", amount: AmountNode(quantity: 1, units: "")),
                    DirectionNode(" cut into pieces"),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testMetadata() {
            let recipe =
                """
                >> sourced: babooshka
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
            ]

            let metadata: [MetadataNode] = [
                MetadataNode("sourced", "babooshka"),]

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testMetadataBreak() {
            let recipe =
                """
                hello >> sourced: babooshka
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("hello >> sourced: babooshka"),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testMetadataMultiwordKey() {
            let recipe =
                """
                >> cooking time: 30 mins
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
            ]

            let metadata: [MetadataNode] = [
                MetadataNode("cooking time", "30 mins"),]

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testMetadataMultiwordKeyWithSpaces() {
            let recipe =
                """
                >>cooking time    :30 mins
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
            ]

            let metadata: [MetadataNode] = [
                MetadataNode("cooking time", "30 mins"),]

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testMultiLineDirections() {
            let recipe =
                """
                Add a bit of chilli

                Add a bit of hummus
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Add a bit of chilli"),
                ]),
                StepNode(instructions: [
                    DirectionNode("Add a bit of hummus"),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testMultipleLines() {
            let recipe =
                """
                >> Prep Time: 15 minutes
                >> Cook Time: 30 minutes
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
            ]

            let metadata: [MetadataNode] = [
                MetadataNode("Prep Time", "15 minutes"),
                MetadataNode("Cook Time", "30 minutes"),]

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testMultiWordIngrident() {
            let recipe =
                """
                @hot chilli{3}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "hot chilli", amount: AmountNode(quantity: 3, units: "")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testMultiWordIngridentNoAmount() {
            let recipe =
                """
                @hot chilli{}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "hot chilli", amount: AmountNode(quantity: 1, units: "")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testMutipleIngridentsWithoutStopper() {
            let recipe =
                """
                @chilli cut into pieces and @garlic
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "chilli", amount: AmountNode(quantity: 1, units: "")),
                    DirectionNode(" cut into pieces and "),
                    IngredientNode(name: "garlic", amount: AmountNode(quantity: 1, units: "")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testQuantityAsText() {
            let recipe =
                """
                @thyme{few%springs}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "thyme", amount: AmountNode(quantity: "few", units: "springs")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testQuantityDigitalString() {
            let recipe =
                """
                @water{7 k }
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    IngredientNode(name: "water", amount: AmountNode(quantity: "7 k", units: "")),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testServings() {
            let recipe =
                """
                >> servings: 1|2|3
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
            ]

            let metadata: [MetadataNode] = [
                MetadataNode("servings", "1|2|3"),]

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testSlashInText() {
            let recipe =
                """
                Preheat the oven to 200℃/Fan 180°C.
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Preheat the oven to 200℃/Fan 180°C."),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testTimerDecimal() {
            let recipe =
                """
                Fry for ~{1.5%minutes}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Fry for "),
                    TimerNode(quantity: 1.5, units: "minutes", name: ""),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testTimerFractional() {
            let recipe =
                """
                Fry for ~{1/2%hour}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Fry for "),
                    TimerNode(quantity: 0.5, units: "hour", name: ""),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testTimerInteger() {
            let recipe =
                """
                Fry for ~{10%minutes}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Fry for "),
                    TimerNode(quantity: 10, units: "minutes", name: ""),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    
        func testTimerWithName() {
            let recipe =
                """
                Fry for ~potato{42%minutes}
                """

            let result = try! Parser.parse(recipe) as! RecipeNode

            let steps: [StepNode] = [
                StepNode(instructions: [
                    DirectionNode("Fry for "),
                    TimerNode(quantity: 42, units: "minutes", name: "potato"),
                ]),
            ]

            let metadata: [MetadataNode] = []

            let node = RecipeNode(steps: steps, metadata: metadata)

            XCTAssertEqual(result, node)
        }
    }